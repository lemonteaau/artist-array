name: CI/CD - Build, Push to ECR, and Deploy to ECS

on:
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: artist-array
  ECS_SERVICE: artist-array-task-service-hg9n2ef7
  ECS_CLUSTER: artist-array-cluster-1
  ECS_TASK_DEFINITION_FAMILY: artist-array-task
  CONTAINER_NAME: artist-array-container

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Setup Node.js and cache pnpm store
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }} \
            --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }} \
            --build-arg NEXT_PUBLIC_CLOUDFLARE_R2_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_CLOUDFLARE_R2_PUBLIC_URL }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download current ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} \
            --query taskDefinition > task-definition.json

      - name: Sanitize task definition
        run: |
          jq 'del(
            .taskDefinitionArn,
            .revision,
            .status,
            .requiresAttributes,
            .compatibilities,
            .registeredAt,
            .registeredBy,
            .enableFaultInjection
          )' task-definition.json > task-definition-clean.json \
          && mv task-definition-clean.json task-definition.json

      - name: Remove sensitive variables from environment section
        run: |
          jq '.containerDefinitions[0].environment = [.containerDefinitions[0].environment[] | select(.name != "CLOUDFLARE_R2_ACCESS_KEY_ID" and .name != "CLOUDFLARE_R2_SECRET_ACCESS_KEY" and .name != "CLOUDFLARE_R2_ACCOUNT_ID" and .name != "CLOUDFLARE_R2_BUCKET_NAME")]' task-definition.json > task-definition-clean.json \
          && mv task-definition-clean.json task-definition.json

      - name: Fill in new image ID in the Amazon ECS task definition
        id: task-def-render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
